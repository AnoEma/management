@page "/listar-usuarios"
@using CSharpFunctionalExtensions
@using Web.Model
@using Web.Services.Interfaces
@rendermode InteractiveServer
@inject NavigationManager Navigation

<h1>Lista dos Usuários</h1>

<div class="table-container">
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Usuário</th>
                <th>Equipe</th>
                <th>Ativo</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @if (UsersList?.Any() == false)
            {
                <tr>
                    <td colspan="6" style="text-align: center; padding: 20px; font-style: italic; color: #999;">Nenhum usuário encontrado.</td>
                </tr>
            }
            else
            {
                @foreach (var item in UsersList)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.User</td>
                        <td>@item.TeamName</td>
                        <td>@item.IsActive</td>
                        <td class="td-button-edit">
                            <button class="button edit" @onclick="() => OnEditUser(item.Id)">Editar</button>
                            <button class="button delete" @onclick="() => OnDeleteUser(item.Id)">Excluir</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>



@code {

    [Inject]
    private IUserService _userService { get; set; }

    private IReadOnlyList<GetAllUserModel> UsersList = [];


    protected override async Task OnInitializedAsync()
    {
        CancellationToken cancellationToken = new();
        var result = await _userService.GetUsersAsync(cancellationToken);

        if (result.IsSuccess)
        {
            UsersList = result.Value;
        }
    }

    private async Task OnDeleteUser(int userId)
    {
        CancellationToken cancellationToken = new CancellationToken();

        var result = await _userService.DeleteAsync(userId, cancellationToken);

        if (result.IsSuccess)
        {
            ReloadPage();
        }
    }

    private void OnEditUser(int userId)
    {
        Navigation.NavigateTo($"/editar-usuario/{userId}", forceLoad: true);
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}
