@page "/registrar-usuario"
@rendermode InteractiveServer
@using Infrastructure.Repository.Users.Commands
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using Web.Model
@using Web.Services.Interfaces
@inject NavigationManager Navigation

<div class="container">
    <h1>Cadastro Usuario</h1>
    <form method="post" @onsubmit="Submit" @formname="user-register">
        <div class="field-compound">
            <div class="field">
                <label for="name">Nome</label>
                <input type="text" id="name" name="name" placeholder="Nome" @bind-value="Model.Name">
            </div>
            <div class="field">
                <label for="lastName">Sobrenome</label>
                <input type="text" id="lastName" name="lastName" placeholder="Sobrenome" @bind-value="Model.LastName">
            </div>
        </div>
        <div class="field-compound">
            <div class="field">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" placeholder="Email" @bind-value="Model.Email">
            </div>
            <div class="field">
                <label for="phone">Telefone</label>
                <input type="tel" id="phone" name="phone" placeholder="Telefone de contato" @bind-value="Model.Phone">
            </div>
        </div>

        <div class="field-compound">
            <div class="field">
                <label for="cpf">CPF</label>
                <input type="text" id="cpf" name="cpf" placeholder="CPF" @bind-value="Model.Cpf">
            </div>
            <div class="field">
                <label for="dateofbirth">Data Nascimento</label>
                <input type="date" id="dateofbirth" name="dateofbirth" placeholder="Data Nascimento" @bind-value="Model.BirthDate">
            </div>
        </div>

        <div class="field-compound">
            <div class="field">
                <label for="gender">Sexo</label>
                <select class="form-select" @onchange="@OnSelectGender">
                    <option value="" disabled>-- Selecione o Sexo --</option>
                    @foreach (var gender in Genders)
                    {
                        <option value="@gender.Value">@gender.Text</option>
                    }
                </select>
            </div>
            <div class="field">
                <label for="profileAccess">Perfil do usuário</label>
                <select class="form-select" @onchange="@OnSelectProfileAccess">
                    <option value="" disabled>-- Selecione o tipo acesso --</option>
                    @foreach (var option in ProfileAccessOptions)
                    {
                        <option value="@option.Value">@option.Text</option>
                    }
                </select>
            </div>
        </div>
        <div class="field-compound">
            <div class="field">
                <label for="user">Usuário</label>
                <input type="text" id="user" name="user" placeholder="Usuário" @bind-value="Model.User">
            </div>
            <div class="field">
                <label for="team">Equipe do usuário</label>
                <select class="form-select" @onchange="@OnSelectTeam">
                    <option value="" disabled>-- Selecione o equipe --</option>
                    @foreach (var option in TeamOptions)
                    {
                        <option value="@option.Value">@option.Text</option>
                    }
                </select>
            </div>
        </div>
        <div class="field-compound">
            <div class="field">
                <label for="password">Senha</label>
                <input type="text" id="password" name="password" placeholder="Senha" @bind-value="Model.Password">
            </div>
            <div class="field">
                <label for="confirmPassword">Confirma senha</label>
                <input type="text" id="confirmPassword" name="confirmPassword" placeholder="Confirma senha" @bind-value="Model.ConfirmPassword">
            </div>
        </div>
        <button type="submit">Criar</button>
    </form>
</div>


@code {

    private IReadOnlyList<Gender> Genders = Gender.GetGenders;
    private IReadOnlyList<ProfileAccess> ProfileAccessOptions = ProfileAccess.GetProfileAccess;
    private IReadOnlyList<Team> TeamOptions = Team.GetTeams;

    [SupplyParameterFromForm]
    private UserModel Model { get; set; }
    public IList<AuthenticationScheme> ExternalLogins { get; set; }
    public string ReturnUrl { get; set; }

    [Inject]
    private IUserService _userService { get; set; }

    [Inject]
    private SignInManager<ManagementUser> _signInManager { get; set; }
    [Inject]
    private UserManager<ManagementUser> _userManager { get; set; }
    [Inject]
    private IUserStore<ManagementUser> _userStore { get; set; }

    private IUserEmailStore<ManagementUser> _emailStore => GetEmailStore();


    protected override void OnInitialized()
    {
        Model ??= new();
    }

    private async Task Submit()
    {
        CancellationToken cancellationToken = new();

        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        if (ExternalLogins.Count > 0)
        {

        }
        var user = CreateUser();
        user.FirstName = Model.Name;
        user.LastName = Model.LastName;

        await _userStore.SetUserNameAsync(user, Model.User, cancellationToken);
        await _emailStore.SetEmailAsync(user, Model.Email, cancellationToken);

        var result = await _userManager.CreateAsync(user, Model.Password);

        if (result.Succeeded)
        {
            var userId = await _userManager.GetUserIdAsync(user);
            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);

            var createUser = await _userService.AddUserAsync(Model, userId);

            if (_userManager.Options.SignIn.RequireConfirmedAccount)
            {
                await _userManager.ConfirmEmailAsync(user, code);
                ReloadPage();
                return;
            }
            ReloadPage();
        }

        foreach (var erro in result.Errors)
        {

        }
    }
    private void ReloadPage()
    {
        Navigation.NavigateTo("/listar-usuarios", forceLoad: true);
    }

    public async Task OnGetAsync(string returnUrl)
    {
        ReturnUrl = returnUrl;
        ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }
    #region Events Select
    void OnSelectTeam(ChangeEventArgs e)
    {
        var team = Team.GetByValue(e.Value.ToString());
        Model.Team = (int)team.Value;
    }

    void OnSelectGender(ChangeEventArgs e)
    {
        var gender = Gender.GetByValue(e.Value.ToString());
        Model.Gender = (int)gender.Value;
    }

    void OnSelectProfileAccess(ChangeEventArgs e)
    {
        var profile = ProfileAccess.GetByValue(e.Value.ToString());
        Model.ProfileAccess = (int)profile.Value;
    }
    #endregion

    private IUserEmailStore<ManagementUser> GetEmailStore()
    {
        if (!_userManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ManagementUser>)_userStore;
    }
    private static ManagementUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ManagementUser>();
        }
        catch (Exception)
        {
            throw;
        }
    }
}
