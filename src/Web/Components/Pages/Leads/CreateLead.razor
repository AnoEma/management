@page "/criar-lead"
@using Web.Model
@using Web.Services.Interfaces
@inject NavigationManager Navigation
@rendermode InteractiveServer


<div class="container">
    <h1>Criar o lead</h1>
    <form method="post" @onsubmit="Submit" @formname="user-create-lead">
        <div class="container-field">
            <div class="field-compound">
                <div class="field">
                    <label for="name">Nome Completo</label>
                    <input type="text" id="name" name="name" placeholder="Nome" @bind-value="leadModel.Name">
                </div>
                <div class="field">
                    <label for="cpf">CPF</label>
                    <input type="text" id="cpf" name="cpf" placeholder="CPF" @onchange="@OnSaveDocument">
                </div>
            </div>
            <div class="field-compound">
                <div class="field">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" name="email" placeholder="Email de contato" @bind-value="leadModel.Email">
                </div>
                <div class="field">
                    <label for="phoneNumber">Telefone</label>
                    <input type="tel" id="phoneNumber" name="phoneNumber" placeholder="Telefone de contato" @bind-value="leadModel.PhoneNumber">
                </div>
            </div>

            <div class="field-compound">
                <div class="field">
                    <label for="birthDate">Data Nascimento</label>
                    <input type="date" id="birthDate" name="birthDate" placeholder="Data Nascimento" @bind-value="leadModel.BirthDate">
                </div>
                <div class="field">
                    <label for="gender">Sexo</label>
                    <select class="form-select" @onchange="@OnSelectGender">
                        <option value="" disabled>-- Selecione o Sexo --</option>
                        @foreach (var gender in Genders)
                        {
                            <option value="@gender.Value">@gender.Text</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="container-field2">
            <div class="field-compound">
                <div class="field-plate">
                    <label for="plate">Placa</label>
                    <input type="text" id="plate" name="plate" placeholder="Placa do veículo" @onchange="@GetVehicle">
                </div>
                <div class="field">
                    <label for="model">Veículo</label>
                    <input type="text" id="model" name="model" placeholder="Modelo do veículo" @bind-value="VehicleDescription">
                </div>
            </div>
            <div class="field-compound">
                <div class="field">
                    <label for="brand">Montador</label>
                    <input type="text" id="brand" name="brand" placeholder="Montador" @bind-value="leadModel.VehicleModel.Brand">
                </div>
                <div class="field-ModelYear">
                    <label for="modelYear">Ano modelo</label>
                    <select class="form-select" @onchange="@OnSelectVehicleYearsModel">
                        <option value="" disabled>-- Selecione --</option>
                        @foreach (var vehicleYears in VehicleYearsModels)
                        {
                            <option value="@vehicleYears.value">@vehicleYears.text</option>
                        }
                    </select>
                </div>
                <div class="field-IsNew">
                    <label for="isNew">Veiculo Zero Km</label>
                    <select class="form-select" @onchange="@OnSelectDecisionMakerModel">
                        <option value="" disabled>-- Selecione --</option>
                        @foreach (var decisionMaker in DecisionMakerModels)
                        {
                            <option value="@decisionMaker.Value">@decisionMaker.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="field-compound">
                <div class="field-ZipCode">
                    <label for="zipCode">Cep</label>
                    <input type="text" id="zipCode" @onchange="@GetAddress" name="zipCode" placeholder="Cep residencial">
                </div>
                <div class="field">
                    <label for="address-description">Endereço</label>
                    <input type="text" id="address-description" name="address-description" @bind-value="AddressDescription">
                </div>
                <div class="field">
                    <label for="address-number">Numero</label>
                    <input type="text" id="address-number" name="address-number" placeholder="numero da residencial" @bind-value="leadModel.AddressModel.Number">
                </div>

                <div class="field">
                </div>
                <div class="field">
                </div>
            </div>
        </div>
        <input type="submit" value="Salvar">
    </form>
</div>

@code {
    private IReadOnlyList<Gender> Genders = Gender.GetGenders;
    private IReadOnlyList<DecisionMakerModel> DecisionMakerModels = DecisionMakerModel.GetDecisionMakerModels;
    private IReadOnlyList<VehicleYearsModel> VehicleYearsModels = VehicleYearsModel.GetVehicleYears;

    [SupplyParameterFromForm]
    private CreateLeadModel leadModel { get; set; }
    private string VehicleDescription { get; set; }
    private string AddressDescription { get; set; }

    [Inject]
    private ILeadsService _leadsService { get; set; }

    protected override void OnInitialized()
    {
        leadModel ??= new();
    }

    private async Task Submit()
    {
        CancellationToken cancellationToken = new();

        var result = await _leadsService.CreateLead(leadModel, cancellationToken);

        if (result.IsSuccess)
        {
            ReloadPage();
            return;
        }
    }


    void OnSelectGender(ChangeEventArgs e)
    {
        leadModel.Gender = int.Parse(e.Value.ToString());
    }

    void OnSelectDecisionMakerModel(ChangeEventArgs e)
    {
        leadModel.VehicleModel.IsNew = bool.TryParse(e.Value.ToString(), out bool decisionMaker);
    }

    void OnSelectVehicleYearsModel(ChangeEventArgs e)
    {
        leadModel.VehicleModel.ModelYear = int.Parse(e.Value.ToString());
    }

    void OnSaveDocument(ChangeEventArgs e)
    {
        var document = e.Value.ToString();

        if (document.Length < 11)
        {
            return;
        }

        leadModel.PersonType = document.Length > 11 ? 2 : 1;
        leadModel.DocumentCpf = document;
    }

    async void GetVehicle(ChangeEventArgs e)
    {
        CancellationToken cancellationToken = new();

        string plate = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(plate) && plate.Length != 7)
        {
            return;
        }
        var vehicle = await _leadsService.GetVehicle(plate, cancellationToken);

        if (vehicle.IsSuccess)
        {
            leadModel.VehicleModel = new()
                {
                    Model = vehicle.Value.Model,
                    ModelYear = int.Parse(vehicle.Value.ModelYear),
                    Plate = vehicle.Value.Plate,
                    Brand = vehicle.Value.Brand,
                    Chassi = vehicle.Value.Chassi
                };

            VehicleDescription = $"{leadModel.VehicleModel.Brand} {leadModel.VehicleModel.Model}";
        }
    }

    async void GetAddress(ChangeEventArgs e)
    {
        CancellationToken cancellationToken = new();

        string zipCode = e.Value?.ToString();
        if (string.IsNullOrEmpty(zipCode) && zipCode.Length != 8)
        {
            return;
        }

        var address = await _leadsService.GetAddress(zipCode, cancellationToken);
        if (address.IsSuccess)
        {
            leadModel.AddressModel = new()
                {
                    Street = address.Value.Street,
                    Neighborhood = address.Value.Neighborhood,
                    City = address.Value.City,
                    State = address.Value.State,
                    ZipCode = zipCode
                };
            AddressDescription = $"Rua {leadModel.AddressModel.Street} Bairro {leadModel.AddressModel.Neighborhood}";
        }
    }

    void ReloadPage()
    {
        Navigation.NavigateTo("/", forceLoad: true);
    }
}
