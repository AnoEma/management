@page "/inicial"
@using Application.Model
@using Web.Extensions
@using Web.Model
@inject NavigationManager Navigation
@using Web.Services.Interfaces
@rendermode InteractiveServer


<h1>Listas dos Leads</h1>
<div class="row">
    @foreach (var lead in Leads)
    {
        var buttonClass = lead.Status == 1
        ? "status-pendente"
        : lead.Status == 2
        ? "status-nao-vendido"
        : "status-outro";

        <div class="col-md-3">
            <div class="card text-bg-info mb-3">
                <div class="card-body">
                    <h5 class="card-title"><strong>Nome completo: </strong>@lead.FullName</h5>
                    <p class="card-text"><strong>CPF: </strong>@lead.DocumentCpf</p>
                    <p class="card-text"><strong>Placa: </strong>@lead.Vehicle.Plate</p>
                    <p class="card-text"><strong>Modelo: </strong>@lead.Vehicle.Model</p>
                    <p class="card-text"><strong>Ano Modelo: </strong>@lead.Vehicle.ModelYear</p>
                    <p class="card-text"><strong>Tipo de Lead: </strong>@GetDescriptionOpportuniteType(lead.InsuranceType)</p>
                    <div class="td-button-edit">
                        <p class="card-text"><strong>Status: </strong> <span class="badge bg-success">@GetDescriptionOpportuniteStatus(lead.Status)</span></p>
                    </div>
                    <div class="td-button-action">
                        <button class="button edit" @onclick="() => handleClick(lead.Id)">
                            <p class="card-text"><strong>Abrir  </strong></p>
                        </button>
                        <button class="button edit action">
                            <p class="card-text"><strong>Atender </strong></p>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>




@code {
    private IReadOnlyList<LeadsModel> Leads = [];

    [Inject]
    private ILeadsService _service { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CancellationToken cancellationToken = new();

        var result = await _service.GetLeads(cancellationToken);

        if (result.IsFailure)
        {
            return;
        }

        Leads = result.Value;
    }

    private void handleClick(int leadId)
    {
        Navigation.NavigateTo($"lead/detalhes/{leadId}", forceLoad: true);
    }

    private string GetDescriptionOpportuniteType(int insuranceType)
    {
        OpportuniteType type = (OpportuniteType)insuranceType;
        return EnumExtensions.GetDescription(type);
    }

    private string GetDescriptionOpportuniteStatus(int status)
    {
        OpportuniteStatus type = (OpportuniteStatus)status;
        return EnumExtensions.GetDescription(type);
    }
}
